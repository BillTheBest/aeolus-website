!!! Strict
%html
  %head
    %title
      Deltacloud - Documentation
    %meta{ :name => "keywords", :content => "" }
    %meta{ :name => "description", :content => "" }
    %meta{ :content => "text/html; charset=utf-8", "http-equiv" => "Content-Type" }
    %link{ :href => "./styles/favicon.ico", :rel => "shortcut icon", :type => "image/x-icon" }
    %link{ :href => "./styles/default.css", :title => "Main style", :rel => "StyleSheet", :type => "text/css" }
    %link{ :href => "./styles/default-debug.css", :title => "Debug main style", :rel => "Alternate StyleSheet", :type => "text/css" }
  %body
    #header
      .container
        #headerLogo{ :onclick => "location.href='index.html';", :style => "cursor: pointer;" }
          %h1
            Deltacloud - Many clouds. One API. No problem.
    #navigation
      #menu.container
        %ul.l0
          %li
            %a.inactive{ :href => "./index.html", :title => "Deltacloud Home" }
              Home
          %li
            %a.inactive{ :href => "./tools.html", :title => "Tools" }
              Tools
          %li
            %a.inactive{ :href => "./download.html", :title => "Get the latest releases" }
              Download
          %li
            %a.inactive{ :href => "./contribute.html", :title => "Information about design/development process" }
              Contribute
          %li
            %a.active{ :href => "./documentation.html", :title => "Project documentation" }
              Documentation
          %li
            %a.inactive{ :href => "./page", :title => "Project wiki" }
              Wiki
    #subnavigation
      #submenu.container
        %ul.l1
          %li
            %a.inactive{ :href => "documentation.html" }
              Overview
          %li
            %a.inactive{ :href => "api.html" }
              REST API
          %li
            %a.inactive{ :href => "client-ruby.html" }
              Ruby Client
          %li
            %a.inactive{ :href => "drivers.html" }
              Drivers
          %li
            %a.active{ :href => "framework.html" }
              Framework
    #main
      #content-deltacloud.container
        %ul.toc
          %li
            %a{ :href => "#driver_spi" }
              Driver SPI
            %ul
              %li
                %a{ :href => "#driver_spi_credentials" }
                  Credentials
              %li
                %a{ :href => "#driver_spi_object_models_used_by_drivers" }
                  Object models used by drivers
              %li
                %a{ :href => "#driver_spi_driver_methods" }
                  Driver methods
        %h1
          Deltacloud Framework (Ruby)
        %p
          The
          %em
            Deltacloud Framework
          is provided to assist in creating
          intermediary
          %a{ :href => "drivers.html" }
            drivers
          which speak the
          %a{ :href => "api.html" }
            Deltacloud REST API
          on
          the front while communicating with cloud providers using
          their own native APIs on the back.
        %p
          %img{ :src => "styles/framework.png", :alt => "Deltacloud framework" }
        %p
          The Deltacloud Framework handles all aspects of the REST
          API, while allowing driver implementors to focus on the
          specific cloud provider native API.
        %p
          The framework is implemented as a Ruby-on-Rails application.
          Drivers may be implemented in as little as one Ruby class
          and plugged into the framework for deployment.
        %h2
          %a{ :name => "driver_spi" }
            Driver SPI
        %h3
          %a{ :name => "driver_spi_credentials" }
            Credentials
        %p
          The framework will collect credentials when the driver indicates
          they are required by throwing a
          %code
            DeltaCloud::AuthException
          \.  Each
          driver method takes a credentials hash as the first parameter,
          but unless the client has provided credentials, this hash will be empty.
        %pre
          %code
            def images(credentials, opts)
            if ( credentials[:name].nil? )
            throw DeltaCloud::AuthException.new
            end
            unless ( credentials_valid?( credentials ) )
            throw DeltaCloud::AuthException.new
            end

            \# do work

            end
        %h3
          %a{ :name => "driver_spi_object_models_used_by_drivers" }
            Object models used by drivers
        %p
          To assist driver authors, the framework provides a handful of
          model classes, representing each resource available through
          the Deltacloud API.  Please see the
          %a{ :href => "api.html" }
            API reference
          for details
          about each model.  All of these model objects may be initialized
          with a hash.  Every instance
          %em
            must
          be assigned an
          %code
            id
          in addition
          to other attributes it may have.  Unless otherwise noted, attributes
          are text.
        %p
          For example
        %pre
          %code
            Flavor.new(
            \:architecture=&gt;'x86_64',
            \:memory=&gt;4,
            \:storage=&gt;650,
            )
        %h4
          %code
            Flavor
          (
          %code
            app/models/flavor.rb
          )
        %p
          Attributes are
        %ul
          %li
            %strong
              %code
                id
          %li
            %strong
              %code
                architecture
          %li
            %strong
              %code
                memory
            \- Decimal, gigabytes
          %li
            %strong
              %code
                storage
            \- Decimal, gigabytes
        %h4
          %code
            Realm
          (
          %code
            app/models/realm.rb
          )
        %p
          Attributes are
        %ul
          %li
            %strong
              %code
                id
          %li
            %strong
              %code
                name
          %li
            %strong
              %code
                state
          %li
            %strong
              %code
                limit
        %h4
          %code
            Image
          (
          %code
            app/models/image.rb
          )
        %p
          Attributes are
        %ul
          %li
            %strong
              %code
                id
          %li
            %strong
              %code
                name
          %li
            %strong
              %code
                architecture
          %li
            %strong
              %code
                owner_id
          %li
            %strong
              %code
                description
        %h4
          %code
            Instance
          (
          %code
            app/models/instance.rb
          )
        %p
          Attributes are
        %ul
          %li
            %strong
              %code
                id
          %li
            %strong
              %code
                name
          %li
            %strong
              %code
                owner_id
            \- Opaque, external reference
          %li
            %strong
              %code
                image_id
            \- References an image by identifier
          %li
            %strong
              %code
                flavor_id
            \- References a flavor image by identifier
          %li
            %strong
              %code
                realm_id
            \- References a realm by identifier
          %li
            %strong
              %code
                state
            \- One of
            %code
              PENDING
            ,
            %code
              RUNNING
            , 'SHUTTING_DOWN', 'STOPPED'
          %li
            %strong
              %code
                actions
            \- Array of applicable actions
          %li
            %strong
              %code
                public_addresses
            \- Array of IP addresses or hostnames as text
          %li
            %strong
              %code
                private_addresses
            \- Array of IP addresses or hostnames as text
        %h3
          %a{ :name => "driver_spi_driver_methods" }
            Driver methods
        %p
          The primary methods a driver class must implement are
        %ul
          %li
            %code
              flavors(credentials, opts=nil)
          %li
            %code
              images(credentials, opts=nil )
          %li
            %code
              realms(credentials, opts=nil)
          %li
            %code
              instances(credentials, opts=nil)
          %li
            %code
              create_instance(credentials, image_id, opts)
          %li
            %code
              reboot_instance(credentials, id)
          %li
            %code
              stop_instance(credentials, id)
          %li
            %code
              destroy_instance(credentials, id)
        %p
          Generally, the
          %code
            BaseDriver
          handles singular cases while the
          specific provider driver must implement only the plural cases,
          along with specific action methods against resources.
        %p
          Additionally, to assist clients in determining what actions
          may be available without making additional requests, the following
          must be implemented.
        %p
          While the
          %code
            credentials
          hash is passed as the first parameter to each
          method, it
          %em
            may
          be empty until the driver throws at least one
          %code
            DeltaCloud::AuthException
          \. This exception will indicate to the
          framework that a normal HTTP authentication challenge should be
          issued to the client.  Depending on the underlying provider the driver
          is connecting to, the credentials may not be required for some methods.
        %p
          Some methods also allow an optional
          %code
            opts
          hash, which may be
          %code
            nil
          or
          empty if not used for a particular invocation.  The
          %code
            BaseDriver
          provides
          a method
          %code
            filter_on(...)
          which may be used to safely filter collections.
          The
          %code
            filter_on(..)
          method will be demonstrated below.
        %ul
          %li
            %code
              instance_states()
        %p
          Each method will be described in more detail below.
        %h4
          %code
            flavors(credentials, opts=nil)
        %p
          The
          %code
            flavors(...)
          method should return an array of
          %code
            Flavor
          objects.
          The
          %code
            opts
          hash, if present, must be inspected for
          %code
            \:id
          and
          %code
            \:architecture
          keys.  If these keys are present, the results should be filtered by the value
          associated with each key.  The
          %code
            filter_on(...)
          method is useful in this case.
        %p
          For example
        %pre
          %code
            def flavors(credentials, opts=nil)
            flavors = fetch_all_flavors()
            flavors = filter_on( flavors, :id, opts )
            flavors = filter_on( flavors, :architecture, opts )
            return flavors
            end
        %h4
          %code
            realms(credentials, opts=nil)
        %p
          The
          %code
            realms(...)
          method should return an array of
          %code
            Realm
          objects.
        %h4
          %code
            images(credentials, opts=nil )
        %p
          The
          %code
            images(...)
          method should return an array of
          %code
            Image
          objects
          visible and accessible to the current user, as defined by the
          %code
            credentials
          hash.
        %p
          The
          %code
            opts
          hash, if present, must be inspected for
          %code
            \:id
          ,
          %code
            \:owner_id
          and
          %code
            \:architecture
          keys.  If these keys are present, the results should be filtered
          by the value assocaited with each key.
        %h4
          %code
            instances(credentials, opts=nil)
        %p
          The
          %code
            instances(...)
          method should return an array of
          %code
            Instance
          objects
          visible and accessible to the current user, as defined bv the
          %code
            credentials
          hash.  If the
          %code
            opts
          hash is present and contains an
          %code
            \:id
          key, the results
          should be filtered by the value associated with the key.
        %h4
          %code
            create_instance(credentials, image_id, opts)
        %p
          The
          %code
            create_instance(...)
          method should create within the cloud, a new
          running instance based from an image identifier.  The method should return
          an
          %code
            Instance
          object representing the newly-created instance.
        %p
          The
          %code
            image_id
          parameter must be non-nil.  The
          %code
            opts
          has may contain keys
          for
          %code
            flavor_id
          and
          %code
            realm_id
          \.  If they are present, they should be used
          for the creation of the instance.  If they are not present, reasonable
          defaults should be used. In the case of flavor, one compatible with the
          image should be used as the default.
        %h4
          %code
            reboot_instance(credentials, id)
        %p
          The
          %code
            reboot_instance(...)
          method should trigger a running instance to be
          rebooted.  This method has no return value.
        %h4
          %code
            stop_instance(credentials, id)
        %p
          The
          %code
            stop_instance(...)
          method should trigger a running instance to be
          stopped.  This method has no return value.  A cloud provider may allow
          restarting an instance, or may not.
        %h4
          %code
            destroy_instance(credentials, id)
        %p
          The
          %code
            destroy_instance(...)
          method should remove the instance from the
          cloud provider, stopping it if necessary first.
        %h4
          %code
            instance_states()
        %p
          The
          %code
            instance_states()
          method should return an complex array/hash
          structure representing the finite-state-machine for instances.
          Each state an instance may be in should be an element in the returned array.
          Each state itself is also an array with 2 member.  The first member is the
          name of the state, and the second member is a hash indicating valid transitions.
        %p
          The general format for the entire FSM structure is
        %pre
          %code
            [
            [ :origin_state1, {
            \:destination_state1=&gt;:action1,
            \:destination_state2=&gt;:action2,
            } ],
            [ :origin_state2, {
            \:destination_state3=&gt;:action3,
            \:destination_state4=&gt;:action4,
            } ],
            ]
        %p
          Valid states are
        %ul
          %li
            %strong
              %code
                \:begin
          %li
            %strong
              %code
                \:pending
          %li
            %strong
              %code
                \:running
          %li
            %strong
              %code
                \:shutting_down
          %li
            %strong
              %code
                \:stopped
          %li
            %strong
              %code
                \:end
        %p
          The
          %code
            \:begin
          state is the state an instance is in immediate before
          being created.  The
          %code
            \:end
          state is the state an instance is in immediately
          after being destroyed.
        %p
          Valid transition actions are
        %ul
          %li
            %strong
              %code
                \:stop
          %li
            %strong
              %code
                \:start
          %li
            %strong
              %code
                \:reboot
        %p
          Additionally, to indicate a transition that may occur
          %em
            without
          an
          action being triggered, the action **
          %code
            \:_auto_
          may be used.
    #footer-deltacloud
      #projects.container
        %p#et
          %a{ :href => "http://et.redhat.com/" }
            %img{ :src => "./styles/et_logo.png", :alt => "A Red Hat Emerging Technology Project" }
        %dl#p1
          %dt
            %a{ :href => "http://augeas.net/" }
              Augeas
          %dd
            %span
              A configuration editing tool and API
          %dt
            %a{ :href => "http://libvirt.org/" }
              libvirt
          %dd
            %span
              The open source virtualization API
        %dl#p2
          %dt
            %a{ :href => "http://cobbler.et.redhat.com/" }
              Cobbler
          %dd
            OS provisioning and profile management
          %dt
            %a{ :href => "http://libguestfs.org/" }
              virt-v2v
          %dd
            %span
              Migrate guests from one hypervisor to another
        %dl#p3
          %dt
            %a{ :href => "http://freeipa.org/" }
              FreeIPA
          %dd
            %span
              Identity, policy and audit management
          %dt
            %a{ :href => "http://virt-manager.org/" }
              Virtual Machine Manager
          %dd
            %span
              Virtualization management from the desktop
