!!! Strict
%html
  %head
    %title
      Deltacloud - Documentation
    %meta{ :name => "keywords", :content => "" }
    %meta{ :name => "description", :content => "" }
    %meta{ :content => "text/html; charset=utf-8", "http-equiv" => "Content-Type" }
    %link{ :href => "./styles/favicon.ico", :rel => "shortcut icon", :type => "image/x-icon" }
    %link{ :href => "./styles/default.css", :title => "Main style", :rel => "StyleSheet", :type => "text/css" }
    %link{ :href => "./styles/default-debug.css", :title => "Debug main style", :rel => "Alternate StyleSheet", :type => "text/css" }
  %body
    #header
      .container
        #headerLogo{ :onclick => "location.href='index.html';", :style => "cursor: pointer;" }
          %h1
            Deltacloud - Many clouds. One API. No problem.
    #navigation
      #menu.container
        %ul.l0
          %li
            %a.inactive{ :href => "./index.html", :title => "Deltacloud Home" }
              Home
          %li
            %a.inactive{ :href => "./tools.html", :title => "Tools" }
              Tools
          %li
            %a.inactive{ :href => "./download.html", :title => "Get the latest releases" }
              Download
          %li
            %a.inactive{ :href => "./contribute.html", :title => "Information about design/development process" }
              Contribute
          %li
            %a.active{ :href => "./documentation.html", :title => "Project documentation" }
              Documentation
          %li
            %a.inactive{ :href => "./page", :title => "Project wiki" }
              Wiki
    #subnavigation
      #submenu.container
        %ul.l1
          %li
            %a.inactive{ :href => "documentation.html" }
              Overview
          %li
            %a.active{ :href => "api.html" }
              REST API
          %li
            %a.inactive{ :href => "client-ruby.html" }
              Ruby Client
          %li
            %a.inactive{ :href => "drivers.html" }
              Drivers
          %li
            %a.inactive{ :href => "framework.html" }
              Framework
    #main
      #content-deltacloud.container
        %ul.toc
          %li
            %a{ :href => "#rest" }
              REST
          %li
            %a{ :href => "#authentication" }
              Authentication
          %li
            %a{ :href => "#primary_entry_point" }
              Primary Entry Point
          %li
            %a{ :href => "#resources" }
              Resources
            %ul
              %li
                %a{ :href => "#resources_flavors" }
                  Flavors
              %li
                %a{ :href => "#resources_realms" }
                  Realms
              %li
                %a{ :href => "#resources_images" }
                  Images
              %li
                %a{ :href => "#resources_instances" }
                  Instances
        %h1
          Deltacloud API
        %p
          The Deltacloud API is built as a service-based REST API.
          You do not directly link a Deltacloud library into your
          program to use it. Instead, a client speaks the Deltacloud
          API over HTTP to a server which implements the REST interface.
        %p
          Of course, at this point in time, no cloud provider
          natively speaks the Deltacloud API. To accomodate
          the native APIs used by the various cloud providers,
          the Deltacloud project also provides a
          %em
            framework
          and a set of
          %em
            drivers
          that work with the framework.
        %p
          By running a framework &amp; driver combination on some
          host, your application can use the Deltacloud API,
          and the driver is responsible for translating these
          calls into each provider's own API.
        %h2
          %a{ :name => "rest" }
            REST
        %p
          The Deltacloud API is a RESTful API, using HATEOAS
          architectural style. The API requires no client-side
          URL construction.  Access is based entirely off a
          single entry-point resource.  This allows other implementors
          to structure their URL space however they like.
        %p
          Additionally, the Deltacloud API uses
          %em
            content negotiation
          to determine the format of the returned representation. As
          of the current revision, the only required representation is
          XML.  Clients wishing to receive XML representations must
          specify the HTTP
          %code
            Accept
          header as
          %code
            text/xml
          \.
        %h2
          %a{ :name => "authentication" }
            Authentication
        %p
          The Deltacloud API uses HTTP authentication methods for
          authenticating a given client.  There is no explicit
          %em
            login
          action required.  If authentication is required,
          an HTTP status of 401 will be returned to challenge
          for credentials.
        %h2
          %a{ :name => "primary_entry_point" }
            Primary Entry Point
        %p
          Any Deltacloud implementor
          %em
            must
          provide exactly
          one well-known URL as an entry-point. For example,
          %code
            http://fancycloudprovider.com/api
          \.
        %p
          The result of this entry-point is a set of entry-points
          into other collections, such as
          %em
            images
          ,
          %em
            instances
          ,
          %em
            flavors
          and
          %em
            realms
          , among others.
        %p
          Each collection is defined by a
          %code
            \&lt;link&gt;
          tag with an
          %code
            href
          attribute which includes the fully-qualified URL
          to the collection (which
          %em
            may
          exist on different servers)
          and a
          %code
            rel
          attribute to denote which collection is being
          specified.
        %pre
          %code
            \&lt;api driver='ec2' version='1.0'&gt;
            \&lt;link href='http://fancycloudprovider.com/api/flavors' rel='flavors' /&gt;
            \&lt;link href='http://fancycloudprovider.com/api/instance-states' rel='instance_states' /&gt;
            \&lt;link href='http://fancycloudprovider.com/api/realms' rel='realms' /&gt;
            \&lt;link href='http://fancycloudprovider.com/api/images' rel='images' /&gt;
            \&lt;link href='http://fancycloudprovider.com/api/instances' rel='instances' /&gt;
            \&lt;/api&gt;
        %h2
          %a{ :name => "resources" }
            Resources
        %p
          From the primary entry-point, a client may follow the URL provided for
          a collection to retrieve the resources within that collection.  The collection
          representation will include the full representations of the items within it,
          along with links to retrieve each item individually.
        %p
          %img{ :src => "styles/basic-relationships.png", :alt => "Basic relationships" }
        %h3
          %a{ :name => "resources_flavors" }
            Flavors
        %p
          Within a cloud provider a
          %em
            flavor
          represents a configuration of resources upon
          which a machine may be deployed. A flavor defines aspects such as local disk storage,
          available RAM, and architecture.  A future revision of the Deltacloud API will
          include more aspects, including number and speed of CPUs available.  Each provider
          is free to define as many (or as few) flavors as desired.
        %pre
          %code
            \&lt;flavors&gt;
            \&lt;flavor href="http://fancycloudprovider.com/api/flavors/m1-small"&gt;
            \&lt;id&gt;m1-small&lt;/id&gt;
            \&lt;architecture&gt;i386&lt;/architecture&gt;
            \&lt;memory&gt;1.7&lt;/memory&gt;
            \&lt;storage&gt;160&lt;/storage&gt;
            \&lt;/flavor&gt;
            \&lt;flavor href="http://fancycloudprovider.com/api/flavors/m1-large"&gt;
            \&lt;id&gt;m1-large&lt;/id&gt;
            \&lt;architecture&gt;x86_64&lt;/architecture&gt;
            \&lt;memory&gt;7.5&lt;/memory&gt;
            \&lt;storage&gt;850&lt;/storage&gt;
            \&lt;/flavor&gt;
            \&lt;/flavors&gt;
        %p
          Each
          %code
            \&lt;flavor&gt;
          block shall contain an
          %code
            href
          attribute providing a URL to manipulate a
          specific flavor, along with elements for each attribute of a flavor.
        %ul
          %li
            %strong
              %code
                id
            A unique identifier for the flavor
          %li
            %strong
              %code
                architecture
            The architecture
            %ul
              %li
                i386
              %li
                x86_64
          %li
            %strong
              %code
                memory
            The amount of RAM, in gigabytes.
          %li
            %strong
              %code
                storage
            The amount of local disk storage, in gigabytes.
        %p
          At this time, flavor resources are immutable and read-only.  In a future revision
          they may be mutable.
        %h3
          %a{ :name => "resources_realms" }
            Realms
        %p
          Within a cloud provider a
          %em
            realm
          represents a boundary containing resources. The
          exact definition of a realm is left to the cloud provider.  In some cases, a realm
          may represent different datacenters, different continents, or different pools of
          resources within a single datacenter. A cloud provider may insist that resources
          must all exist within a single realm in order to cooperate.  For instance, storage
          volumes may only be allowed to be mounted to instances within the same realm.
        %pre
          %code
            \&lt;realms&gt;
            \&lt;realm href="http://fancycloudprovider.com/api/realms/us"&gt;
            \&lt;id&gt;us&lt;/id&gt;
            \&lt;name&gt;United States&lt;/name&gt;
            \&lt;state&gt;AVAILABLE&lt;/state&gt;
            \&lt;limit/&gt;
            \&lt;/realm&gt;
            \&lt;realm href="http://fancycloudprovider.com/api/realms/eu"&gt;
            \&lt;id&gt;eu&lt;/id&gt;
            \&lt;name&gt;Europe&lt;/name&gt;
            \&lt;state&gt;AVAILABLE&lt;/state&gt;
            \&lt;limit/&gt;
            \&lt;/realm&gt;
            \&lt;/realms&gt;
        %p
          Each
          %code
            \&lt;realm&gt;
          block shall contain an
          %code
            href
          attribute providing a URL to manipulate a
          specific realm, along with elements for each attribute of a realm.
        %ul
          %li
            %strong
              %code
                id
            A unique identifier for the realm
          %li
            %strong
              %code
                name
            A short label
          %li
            %strong
              %code
                state
            Indicator of the current state of a realm
            %ul
              %li
                AVAILABLE
              %li
                UNAVAILABLE
          %li
            %strong
              %code
                limit
            Limits applicable for the
            %em
              current requester
        %h3
          %a{ :name => "resources_images" }
            Images
        %p
          An
          %em
            image
          is a platonic form of a machine. Images are not directly
          executable, but are a template for creating actual instances of
          machines.
        %p
          The instances collection will return a set of all images available to
          the current user.
        %pre
          %code
            \&lt;images&gt;
            \&lt;image href="http://fancycloudprovider.com/api/images/img1"&gt;
            \&lt;id&gt;img1&lt;/id&gt;
            \&lt;owner_id&gt;fedoraproject&lt;/owner_id&gt;
            \&lt;name&gt;&lt;/name&gt;
            \&lt;description&gt;Fedora 10&lt;/description&gt;
            \&lt;architecture&gt;x86_64&lt;/architecture&gt;
            \&lt;/image&gt;
            \&lt;image href="http://fancycloudprovider.com/api/images/img2"&gt;
            \&lt;id&gt;img2&lt;/id&gt;
            \&lt;owner_id&gt;fedoraproject&lt;/owner_id&gt;
            \&lt;name&gt;&lt;/name&gt;
            \&lt;description&gt;Fedora 10&lt;/description&gt;
            \&lt;architecture&gt;i386&lt;/architecture&gt;
            \&lt;/image&gt;
            \&lt;image href="http://fancycloudprovider.com/api/images/img3"&gt;
            \&lt;id&gt;img3&lt;/id&gt;
            \&lt;owner_id&gt;ted&lt;/owner_id&gt;
            \&lt;name&gt;&lt;/name&gt;
            \&lt;description&gt;JBoss&lt;/description&gt;
            \&lt;architecture&gt;i386&lt;/architecture&gt;
            \&lt;/image&gt;
            \&lt;/images&gt;
        %p
          Each
          %code
            \&lt;image&gt;
          block
          %em
            shall
          contain an
          %code
            href
          attribute providing
          a URL to manipulate a specific image, along with elements for each
          attribute of an image.  Each element, including those for optional
          attributes must be present.  Optional attributes may be specified
          as a element with empty content.
        %p
          These attributes include
        %ul
          %li
            %strong
              %code
                id
            A unique identifier for the image
          %li
            %strong
              %code
                owner_id
            An opaque identifier which indicates the owner of an image
          %li
            %strong
              %code
                name
            An
            %em
              optional
            short label describing the image
          %li
            %strong
              %code
                description
            An
            %em
              optional
            description describing the image more fully
          %li
            %strong
              %code
                architecture
            A description of the machine architecture of the image
            which may contain values such as:
            %ul
              %li
                %code
                  i386
              %li
                %code
                  x86_64
        %p
          At this time, image resources are immutable and read-only.  In a future revision
          they will be mutable.
        %h3
          %a{ :name => "resources_instances" }
            Instances
        %p
          An
          %em
            instance
          is a concrete machine realized from an
          %em
            image
          \.  The images
          collection may be obtained by following the link from the primary entry-point.
        %pre
          %code
            \&lt;instances&gt;
            \&lt;instance href="http://fancycloudprovider.com/api/instances/inst1"&gt;
            \&lt;id&gt;inst1&lt;/id&gt;
            \&lt;owner_id&gt;larry&lt;/owner_id&gt;
            \&lt;name&gt;Production JBoss Instance&lt;/name&gt;
            \&lt;image href="http://fancycloudprovider.com/api/images/img3"/&gt;
            \&lt;flavor href="http://fancycloudprovider.com/api/flavors/m1-small"/&gt;
            \&lt;realm href="http://fancycloudprovider.com/api/realms/us"/&gt;

            \&lt;state&gt;RUNNING&lt;/state&gt;
            \&lt;actions&gt;
            \&lt;link rel="reboot" href="http://fancycloudprovider.com/api/instances/inst1/reboot"/&gt;
            \&lt;link rel="stop" href="http://fancycloudprovider.com/api/instances/inst1/stop"/&gt;
            \&lt;/actions&gt;
            \&lt;public-addresses&gt;
            \&lt;address&gt;inst1.larry.fancycloudprovider.com&lt;/address&gt;
            \&lt;/public-addresses&gt;

            \&lt;private-addresses&gt;
            \&lt;address&gt;inst1.larry.internal&lt;/address&gt;
            \&lt;/private-addresses&gt;
            \&lt;/instance&gt;
            \&lt;/instances&gt;
        %p
          Each
          %code
            \&lt;instance&gt;
          block shall contain an href attribute providing a URL to manipulate a
          specific instance, along with elements for each attribute of an instance. Each element,
          including those for optional attributes must be present. Optional attributes may be
          specified as a element with empty content.
        %p
          Simple attributes include
        %ul
          %li
            %strong
              %code
                id
            A unique identifier for the instance
          %li
            %strong
              %code
                owner_id
            An opaque identifier which indicates the owner of an instance
          %li
            %strong
              %code
                name
            An
            %em
              optional
            short label describing the instance
          %li
            %strong
              %code
                image
            Provides a link to the platonic image from which the instance is based
          %li
            %strong
              %code
                flavor
            Provides a link to flavor of virtual hardware in use by the instance
          %li
            %strong
              %code
                realm
            Provides a link to the realm where the instance is deployed
          %li
            %strong
              %code
                state
            Indicator of the instance's current state
            %ul
              %li
                %code
                  PENDING
              %li
                %code
                  STOPPED
              %li
                %code
                  RUNNING
        %p
          Multiple-valued attributes include
        %ul
          %li
            %strong
              %code
                public-addresses
            Publicly routable IP addresses or names for the instance
          %li
            %strong
              %code
                private-addresses
            Private network IP addresses or names for the instance
        %p
          In addition to the abovementioned attributes, each
          %code
            \&lt;instance&gt;
          may contain an
          %code
            \&lt;actions&gt;
          block specifying valid actions for the instance, along with the URL
          which may be used to perform the action.  Each action is specified by a
          %code
            \&lt;link&gt;
          with an
          %code
            href
          attribute providing the URL, and a
          %code
            rel
          attribute providing
          a key to determine what the action will do.
        %p
          Representative actions include
        %ul
          %li
            %code
              reboot
          %li
            %code
              start
          %li
            %code
              stop
        %p
          Not all actions may be valid at all times for all instances.  To invoke an
          action, a client must perform an HTTP
          %code
            POST
          to the URL indicated.
        %h4
          Creating a new Instance
        %p
          Per usual REST architectural style, new instances are created by issuing
          an HTTP
          %code
            POST
          to the instances collection as defined through the
          primary entry-point URL. Data should be sent in
          %code
            application/x-www-form-urlencoded
          format.
        %p
          To create a new instance, only one parameter is required
        %ul
          %li
            %strong
              %code
                image_id
            The identifier (not URL) of the image from which to base the instance
        %p
          Optional parameters may also be provided
        %ul
          %li
            %strong
              %code
                realm_id
            The realm in which to launch the instance
          %li
            %strong
              %code
                flavor_id
            The machine flavor upon which to launch the instance
          %li
            %strong
              %code
                name
            A short label to identify the instance
        %p
          If
          %code
            realm_id
          or
          %code
            flavor_id
          are not specified, the provider
          %em
            must
          select
          reasonable defaults.  The architecture of the selected flavor
          %em
            must
          match the
          architecture of the specified image.
        %p
          After
          %code
            POST
          ing the data, the server
          %em
            shall
          return a representation of
          the newly-created instance's XML, including a URL to retrieve the instance
          in the future.
    #footer-deltacloud
      #projects.container
        %p#et
          %a{ :href => "http://et.redhat.com/" }
            %img{ :src => "./styles/et_logo.png", :alt => "A Red Hat Emerging Technology Project" }
        %dl#p1
          %dt
            %a{ :href => "http://augeas.net/" }
              Augeas
          %dd
            %span
              A configuration editing tool and API
          %dt
            %a{ :href => "http://libvirt.org/" }
              libvirt
          %dd
            %span
              The open source virtualization API
        %dl#p2
          %dt
            %a{ :href => "http://cobbler.et.redhat.com/" }
              Cobbler
          %dd
            OS provisioning and profile management
          %dt
            %a{ :href => "http://libguestfs.org/" }
              virt-v2v
          %dd
            %span
              Migrate guests from one hypervisor to another
        %dl#p3
          %dt
            %a{ :href => "http://freeipa.org/" }
              FreeIPA
          %dd
            %span
              Identity, policy and audit management
          %dt
            %a{ :href => "http://virt-manager.org/" }
              Virtual Machine Manager
          %dd
            %span
              Virtualization management from the desktop
