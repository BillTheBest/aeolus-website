This is a getting started guide for working with Deltacloud.  It's
intended for people who want to get deltacloud up and running for
development purposes.  If you want to just install and run deltacloud,
please use the packages provided by your distribution.


How the deltacloud pieces fit together
--------------------------------------
Deltacloud consists of 4 main pieces: the deltacloud aggregator, the
deltacloud Web User Interface (WUI), the deltacloud drivers, and
the deltacloud API.  The architecture loosely looks like the
picture below:

   ############
 ##            ##   Native API                  deltacloud
#     Cloud      #  (i.e. EC2)  +------------+     API      +------------+
#    Provider    # <----------> | deltacloud | <----------> | deltacloud |
#   (i.e. EC2)   #              |   driver   |              |  API user  |
 ##            ##               +------------+              +------------+
   ###########
                                    ^
                                    |  deltacloud API
                                    |
                                    v
                  internal                  deltacloud
+------------+      API     +------------+     API      +------------+
| deltacloud | <----------> | deltacloud | <----------> | deltacloud |
|    WUI     |              | aggregator |              |  API user  |
+------------+              +------------+              +------------+

In words, what the above picture means is that you have one or more
deltacloud drivers running that translate the deltacloud API into
the native API that the backend cloud speaks (if a backend cloud
speaks deltacloud API natively, then this isn't necessary).  Once
the driver is in place, then a deltacloud API user can talk to the
backend cloud using the deltacloud API.  One of the deltacloud API
users is the deltacloud aggregator, which can be used to aggregate
disparate backend clouds and make business logic decisions about
which particular cloud an instance should start in.  The deltacloud
aggregator speaks to the deltacloud WUI, which provides a
user-friendly web user interface for users.  The aggregator can
also be accessed via the deltacloud API to support other
user interfaces.


Checking out the components
---------------------------
If you are reading this document, we assume you have already checked
out the docs git repository.  Just in case you haven't, you should
check out the following pieces:

$ git clone git://git.fedorahosted.org/git/deltacloud/core.git/
  - This is the "core" of deltacloud; it includes both the source code
    for the deltacloud API, and the various drivers
$ git clone git://git.fedorahosted.org/git/deltacloud/docs.git/
  - Documentation for deltacloud (including this document)
$ git clone git://git.fedorahosted.org/git/deltacloud/portal.git/
  - The deltacloud aggregator code

Switch the `docs` and `portal` repositories to the "next" branch:

$ cd docs
$ git checkout -t origin/next
$ cd ../portal
$ git checkout -t origin/next

This will get you to the latest and greatest stuff.


Installing packages
-------------------
In order to make the deltacloud components work, you'll need to
install at least the following packages (on Fedora 12: your distro's
packages may vary):

rubygem-rails
rubygem-daemons
rubygem-gettext_rails
rubygem-sqlite3-ruby
rubygem-compass (this is not yet in Fedora, so you'll have to gem install)
rubygem-haml (this is not yet in Fedora, so you'll have to gem install)

If you want to develop using PostgreSQL database instead of the default SQLite,
install these, too:

ruby-postgres
postgresql
postgresql-server

You will also need deltacloud-client gem. You can either install the packaged version:

$ gem itstall deltacloud-client

or build it yourself from the core.git repository:

$ cd core/client
$ gem build deltacloud-client.gemspec
$ gem install deltacloud-client-*.gem


Database
--------
For development purposes we're using SQLite database which is much easier to
set up.

However, we _strongly_ suggest using a more suitable replacement (such as
PostgreSQL) in production.

If you want to set up PostgreSQL, read the following section. SQLite users may
skip it and continue with "Setting up the drivers".


PostgreSQL database setup
-------------------------
Once you have the proper packages installed you have to setup the
postgresql database.  As root:

# /sbin/service postgresql initdb
# /sbin/service postgresql start
# su - postgres
$ psql
postgres=# CREATE USER dcloud WITH PASSWORD 'v23zj59an' CREATEDB;
postgres=# \q
$ exit

Now you need to edit the pg_hba.conf file
(/var/lib/pgsql/data/pg_hba.conf on Fedora 12):

--------- snip ------------------------------
local all all trust
host all all 127.0.0.1 255.255.255.255 trust
host all all ::1/128 trust
--------- snip ------------------------------

If you are running on Fedora 12 *only*, to make rake
succeed you need to append the following to
/usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/connection_adapters/postgresql_adapter.rb:

       def PGconn.quote_ident(name)
           %("#{name}")
       end

(see http://github.com/mneumann/postgres-pr/issues/unreads#issue/1)


Setting up the drivers
----------------------
For testing purposes we'll start with the mock driver.  Use of the
rest of the drivers should be similar, although may require some
additional gems be installed.

$ cd path/to/deltacloud/core/server/bin
$ ./deltacloudd -i mock

This will run the deltacloud core server on port 3001.


Setting up the aggregator
-------------------------
Now we need to setup the aggregator (which includes the UI).
As your normal user:


For SQLite:
    $ cd path/to/deltacloud/portal/src/config
    $ mv database.sqlite database.yml
    $ rake db:create:all
    $ rake db:migrate
    $ cd ../db

    You should see the "development.sqlite" file there.

For PostgreSQL:
    $ cd path/to/deltacloud/portal/src
    $ rake db:create:all
    $ rake db:migrate
    $ rake db:test:prepare

If all went well here, then the database should be ready for you
to start up the aggregator.

You can now run the UI:

$ ./script/server

Which will start up the aggregator UI on port 3000.


Checking out the UI
-------------------
Now that you have all of the components running, you
should be able to point your web browser at localhost:3000
and see the UI.  Happy hacking!
