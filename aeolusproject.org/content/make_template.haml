---
title: Aeolus | Create a Fedora 15 Template
breadcrumb_name: Make Template
extension: html
filter: haml
---
%h1 Create a Fedora 15 Template

.page-listing
  %h3 Getting Started Guide

  %ol
    %li
      %a{ :href => "configuring_aeolus.html",
          :title => "Configuring Aeolus" } Configuring Aeolus

    %li
      %a{ :href => "first_login.html",
          :title => "First login" } First login

    %li
      %a{ :href => "set_up_ec2.html",
          :title => "Configuring for Amazon EC2" } Configuring for Amazon EC2

    %li
      Create a Fedora 15 Template

    %li
      %a{ :href => "start_image.html",
          :title => "Start an Instance of the Image" } Start an Instance of the Image

    %li
      %a{ :href => "stop_image.html",
          :title => "Stop a running Instance" } Stop a running Instance

    %li
      %a{ :href => "cleaning_up.html",
          :title => "Cleaning up" } Cleaning up

%br

.section-grouping
  %h2 1. Create the template

  %p
    Create an xml file with the following content in it, the file name and extension doesn't matter.

  %p
    %pre
      :escaped
        <template>
          <name>Fedora 15 Template</name>
          <os>
            <name>Fedora</name>
            <version>15</version>
            <arch>x86_64</arch>
            <install type='url'>
              <url>http://download.fedoraproject.org/pub/fedora/linux/releases/15/Fedora/x86_64/os/</url>
            </install>
          </os>
          <description>A Fedora 15 Image Factory Template</description>
        </template>
  
%br

.section-grouping
  %h2 2. Build the image, transfer the image

  %p
    Now use the aeolus-image command-line tool to build the image described in the XML.

    %pre
      :preserve
        $ aeolus-image build --target ec2 --template template.xml

        Target Image: 663ad46e-709f-4ea1-89f0-e73b8bb2205a
        Image: cb7acabd-59c3-41a7-894a-f3e1b072638c
        Build: 3b5624b1-c9a5-48e2-b6cb-2abecd232eb9
        Status: COMPLETED
        Percent Complete: 100

  %p
    When building for EC2, this occurs in the form of a "snapshot build" that
    occurs in the cloud using your EC2 credentials. For all other providers, Image
    Factory will build an image locally inside of a virtual machine, so hardware
    virtualization support is required.

  %p
    Take note of the line beginning "Image:" -- this UUID (cb7acabd-59c3-41a7-894a-f3e1b072638c)
    is important and we will use it in the step below.

  %p
    It is possible to build for more than one target by separating them with commas, e.g., with --target ec2,mock.

  %p
    Once an image is built, you will want to push the built image to one or
    more providers. You must specify the image ID, which is the Image UUID obtained
    in the step above. In this step, instead of specifying --target, we will
    specify the name of the Provider in Conductor.  %pre

    %pre
      :preserve
        $ aeolus-image push --provider ec2-us-east-1 --id cb7acabd-59c3-41a7-894a-f3e1b072638c

        Provider Image: 06479253-5f01-42b4-8d55-0e7ae8619700
        Image: cb7acabd-59c3-41a7-894a-f3e1b072638c
        Build: 3b5624b1-c9a5-48e2-b6cb-2abecd232eb9
        Status: PUSHING
        Percent Complete: 0

  %p
    Building and pushing can take some time.
    %br
    To monitor the build process
    %em tail
    the image factory log:
    %pre
      :preserve
        $ tail -20f /var/log/imagefactory.log
        [verbose progress information appears here]

    To monitor the push process
    %em tail
    the image factory and image warehouse logs:
    %pre
      :preserve
        $ tail -20f /var/log/imagefactory.log /var/log/iwhd.log
        [verbose progress information appears here]

  %p
    You will know it has finished when the output in the log file ceases after
    displaying an entry like this:

  %p
    %pre
      :preserve
        2011-05-03 06:31:12,216 DEBUG imagefactory.qmfagent.BuildAdaptor.BuildAdaptor pid(1734) Message: Raising event
        with agent handler (&lt;ImageFactoryAgent(Thread-1, initial)&gtl), changed status from PUSHING to COMPLETED

%br

.section-grouping
  %h2 3. Verifying on the Amazon Cloud side

  %p
    If you load Amazon's AWS Management Console in your web browser, you will
    see this image in your list of registered AMI's:

  %p
    &nbsp;&nbsp;&nbsp;
    %img{ :src => "images/getting_started/new_ami_in_ami_list.png",
          :title => "New registered AMI",
          :alt => "New registered AMI" }

  %p
    Changing to the Amazon S3 tab, you will see a new bucket has been
    created to hold the AMI:

  %p
    &nbsp;&nbsp;&nbsp;
    %img{ :src => "images/getting_started/new_s3_bucket_holding_ami.png",
          :title => "New S3 bucket",
          :alt => "New S3 bucket" }

%br

%a.button{ :href => "start_image.html", :title => "Start An Instance Of An Image" }
  Start Image
  %img{:src => "images/button-right.png", :alt => "â†’"}
